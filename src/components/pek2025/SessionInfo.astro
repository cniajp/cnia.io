---
import { Image } from 'astro:assets';
import { fetchTags } from '../../utils/fetchTags.ts';
import { getAffiliation, getTalkAbstract } from '../../utils/fortee';
import type { Speaker, ForteeTag } from '../../types';

export interface Props {
  id: string;
  url: string;
  title: string;
  abstract: string;
  speaker: Speaker;
}

const { id, url, title, abstract, speaker } = Astro.props;

const avatarUrl = speaker.avatar_url;
const relativeImagePath = avatarUrl?.startsWith('https://') ? avatarUrl : `/pek_trademark.png`;

let tags: ForteeTag[] = [];
async function loadTags() {
  return await fetchTags(url);
}
tags = await loadTags();

// 会社名/所属団体名を取得
const affiliation = getAffiliation(speaker.kana ?? '');
// トーク概要を取得
const talkAbstract = getTalkAbstract(abstract ?? '');

// 名前からイニシャルを生成
const getInitials = (name: string) => {
  return name
    .split(" ")
    .map((part) => part.charAt(0))
    .join("")
    .toUpperCase()
    .slice(0, 2);
};

// tagsの0番目をカテゴリとして使用、残りをタグとして使用
const categoryTag = tags.length > 0 ? tags[0] : null;
const displayTags = tags.length > 1 ? tags.slice(1) : [];

// カテゴリテキストを取得（カッコ内を除去）
const categoryText = categoryTag ? categoryTag.text.replace(/\s*[(（].*?[)）]\s*/g, '').trim() : "技術セッション";
---

<a href={`/pek2025/sessions/${id}`} class="block text-black no-underline">
  <div class="h-full hover:shadow-lg transition-shadow duration-200 border border-gray-200 bg-white rounded-xl">
    <div class="p-4 pb-4">
      <div class="flex items-start justify-between gap-3 mb-4">
        <h3 class="text-xl font-bold text-gray-900 leading-tight line-clamp-2 flex-1">{title}</h3>
      </div>
      {categoryTag && (
          <div class="mb-4 flex items-center gap-2 flex-wrap">
          <span 
            class="px-1.5 py-0.5 rounded shrink-0 font-medium"
            style={`font-size: 14px; background-color: ${categoryTag.backgroundColor}; color: ${categoryTag.color};`}
          >
            {categoryText}
          </span>
        </div>
      )}

      <div class="flex items-center gap-3 mb-4">
        <div class="relative w-10 h-10">
          {avatarUrl ? (
            <Image
              src={relativeImagePath}
              alt={`${speaker.name}のアイコン`}
              width={40}
              height={40}
              class="rounded-full border-2 border-gray-200"
            />
          ) : (
            <div class="w-10 h-10 bg-pek2025-primary-100 text-pek2025-primary-700 font-semibold text-sm rounded-full flex items-center justify-center border-2 border-gray-200">
              {getInitials(speaker.name)}
            </div>
          )}
        </div>

        <div class="flex-1 min-w-0">
          <div class="font-semibold text-gray-900 text-sm truncate">{speaker.name}</div>
          <div class="flex items-center gap-1 text-xs text-gray-600">
            <svg class="h-3 w-3 shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
            <span class="truncate">{affiliation}</span>
          </div>
        </div>
      </div>
    </div>

    <div class="px-4 pb-4">
      <div class="space-y-4">
        <p class="text-gray-700 text-sm leading-relaxed line-clamp-4">{talkAbstract}</p>

        {displayTags.length > 0 && (
          <div class="flex flex-wrap gap-1">
            {displayTags.map((tag) => {
              // 全角と半角のカッコとその中身を除去
              const processedText = tag.text.replace(/\s*[(（].*?[)）]\s*/g, '').trim();
              return (
                <span
                  class="px-1.5 py-0.5 mr-2 mb-1 rounded"
                  style={`font-size: 14px; background-color: ${tag.backgroundColor}; color: ${tag.color};`}
                >
                  {processedText}
                </span>
              );
            })}
          </div>
        )}
      </div>
    </div>
  </div>
</a>
