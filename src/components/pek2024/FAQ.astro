---
export interface FAQItem {
  title: string;
  description: string;
}

export interface FAQProps {
  highlight: string;
  title: string;
  items: FAQItem[];
}

const { highlight, title, items } = Astro.props as FAQProps;
---

<section class="bg-white dark:bg-slate-800 py-10 md:py-14">
  <div class="max-w-xl sm:mx-auto lg:max-w-2xl">
    <div class="mb-10 md:mx-auto text-center md:mb-12 max-w-3xl">
      <p class="text-base dark:text-blue-200 font-semibold tracking-wide uppercase">{highlight}</p>
      <h2 class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4">{title}</h2>
    </div>
  </div>
  <div class="max-w-4xl mx-auto px-4">
    {
      items.map((item) => (
        <div class="faq-item mb-4 border-2 overflow-hidden font-bold">
          <button class="faq-question flex justify-between items-center w-full py-3 px-4" aria-expanded="false">
            <span>{item.title}</span>
            <span class="expand-icon">+</span>
          </button>
          <div class="faq-answer hidden px-4 py-3 border-t-2 bg-blue-50 text-black font-medium text-sm">
            <p>{item.description}</p>
          </div>
        </div>
      ))
    }
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.faq-question').forEach((button) => {
      button.addEventListener('click', () => {
        const answer = button.nextElementSibling;
        const expanded = button.getAttribute('aria-expanded') === 'true';
        const icon = button.querySelector('.expand-icon');

        // aria-expanded属性をトグル
        button.setAttribute('aria-expanded', String(!expanded));
        answer?.classList.toggle('hidden');

        // アイコンのテキストを切り替え
        icon!.textContent = expanded ? '+' : '-';
        // .rotatedクラスをトグルして回転エフェクトを適用
        icon?.classList.toggle('rotated');
      });
    });
  });
</script>

<style>
  .expand-icon {
    transition: transform 0.5s ease;
  }
  .expand-icon.rotated {
    transform: rotate(180deg);
  }
</style>
