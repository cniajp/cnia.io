---
import Layout from '~/layouts/pek2025/PageLayout.astro';
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import defaultThumbnail from '~/assets/images/pek_trademark.png';

const allPosts = await getCollection('pek2025-blog', ({ data }) => {
  return data.draft !== true;
});
const teamMemberImages = import.meta.glob<{ default: ImageMetadata }>(
  '~/assets/images/pek2025/teamMembers/*.{jpeg,jpg,png,gif}'
);
allPosts.sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());
allPosts.forEach((post) => {
  if (!post.data.author?.icon) return;
  if (!teamMemberImages[post.data.author.icon])
    throw new Error(
      `"${post.data.author.icon}" does not exist in glob: "/src/assets/images/pek2025/teamMembers/*.{jpeg,jpg,png,gif}"`
    );
});
const getUrl = (id: string) => `/pek2025/blog/${id}`;
---

<Layout
  meta={{
    title: 'PEK2025 Blog',
    description: 'Platform Engineering Kaigi 2025に関する情報を発信しています。',
  }}
>
  <div class="pek2025-page bg-gradient-to-b from-pek2025-primary-50 to-white min-h-screen">
    <section class="container mx-auto px-4 py-16">
      <div class="max-w-4xl mx-auto">
        <div class="text-center mb-12">
          <h1 class="text-3xl md:text-4xl font-bold text-pek2025-primary-600 mb-4">PEK2025 Blog</h1>
          <p class="text-xl text-gray-700 max-w-3xl mx-auto">
            Platform Engineering Kaigi 2025に関する情報を発信しています。
          </p>
        </div>

        {
          allPosts.length === 0 && (
            <div class="text-center py-16">
              <div class="bg-white rounded-xl shadow-sm border border-pek2025-border p-8">
                <p class="text-gray-500 text-lg">これから情報を発信していきます。</p>
              </div>
            </div>
          )
        }

        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-2">
          {
            allPosts.map((post) => (
              <article class="bg-white rounded-xl shadow-sm border border-pek2025-border hover:shadow-md transition-shadow">
                <a href={getUrl(post.id)} class="block">
                  <div class="aspect-video overflow-hidden rounded-t-xl">
                    {post.data.image ? (
                      <Image
                        src={post.data.image}
                        class="p-4 w-full h-full object-contain hover:scale-105 transition-transform duration-300"
                        alt={post.data.description || ''}
                        width={600}
                        height={314}
                        inferSize={false}
                      />
                    ) : (
                      <Image
                        src={defaultThumbnail}
                        class="p-4 w-full h-full object-contain hover:scale-105 transition-transform duration-300"
                        alt={post.data.description || ''}
                        width={600}
                        height={314}
                      />
                    )}
                  </div>
                </a>
                
                <div class="p-6">
                  <div class="flex justify-between items-center mb-4 text-sm text-gray-500">
                    {post.data.category && (
                      <span class="bg-pek2025-primary-100 text-pek2025-primary-700 px-3 py-1 rounded-full font-medium">
                        {post.data.category}
                      </span>
                    )}
                    <time class="text-gray-500">
                      {new Date(post.data.publishDate).toLocaleDateString('ja-JP', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </time>
                  </div>

                  <h2 class="text-xl font-bold text-pek2025-primary-700 mb-3 hover:text-pek2025-primary-600 transition-colors">
                    <a href={getUrl(post.id)}>{post.data.title}</a>
                  </h2>
                  
                  <p class="text-gray-600 mb-4 line-clamp-3">
                    {post.data.description.length > 120 ? post.data.description.slice(0, 120) + '...' : post.data.description}
                  </p>

                  <div class="flex justify-between items-center">
                    {post.data.author && (
                      <div class="flex items-center space-x-3">
                        {post.data.author.icon && (
                          <Image
                            class="w-8 h-8 rounded-full border-2 border-pek2025-primary-100"
                            src={teamMemberImages[post.data.author.icon]()}
                            alt={`${post.data.author.name}のアイコン`}
                            width={32}
                            height={32}
                          />
                        )}
                        <span class="text-sm font-medium text-gray-700">{post.data.author.name}</span>
                      </div>
                    )}
                    
                    <a 
                      href={getUrl(post.id)} 
                      class="inline-flex items-center text-pek2025-primary-600 hover:text-pek2025-primary-700 font-medium text-sm transition-colors"
                    >
                      続きを読む
                      <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>

                  {post.data.tags && post.data.tags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mt-4 pt-4 border-t border-gray-100">
                      {post.data.tags.map((tag, i) => {
                        const tagColors = [
                          'bg-pek2025-secondary-100 text-pek2025-secondary-700',
                          'bg-pek2025-accent-100 text-pek2025-accent-700',
                          'bg-pek2025-primary-100 text-pek2025-primary-700'
                        ];
                        const colorClass = tagColors[i % 3];
                        return (
                          <span class={`px-2 py-1 text-xs font-medium rounded-md ${colorClass}`}>
                            {tag}
                          </span>
                        );
                      })}
                    </div>
                  )}
                </div>
              </article>
            ))
          }
        </div>
      </div>
    </section>
  </div>
</Layout>
